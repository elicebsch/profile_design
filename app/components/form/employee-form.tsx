'use client'

import React from 'react'

import { useFieldArray, useForm } from 'react-hook-form'

import { Employee } from '@/app/validation/fetch-validation'
import { Project, Skill } from '@/app/validation/fetch-validation'
import { handleCreateNewEmployee } from '@/app/actions'


export default function EmployeeForm({ projects, skills }: { projects: Project[], skills: Skill[] }) {

    const { control, register, handleSubmit, formState: { errors } } = useForm<Employee>()

    const { fields, append, remove } = useFieldArray({
        control,
        name: "skills"
    });
    

    return (
        <div>
            <form onSubmit={handleSubmit((data) => handleCreateNewEmployee(data))} className='flex-col space-y-0.5'>

                <div>
                    {/* <label htmlFor="Vorname">Vorname</label> */}
                    <input {...register("firstName", { required: 'Vorname erforderlich!' })} type="text" placeholder='Vorname' />
                    <span className='text-red-600'>{errors.firstName?.message}</span>
                </div>

                <div>
                    {/* <label htmlFor="Name">Name</label> */}
                    <input {...register("lastName", { required: 'Nachname erforderlich!' })} type="text" placeholder='Name' />
                    <span className='text-red-600'>{errors.lastName?.message}</span>
                </div>

                <div>
                    {/* <label htmlFor="kuerzel">Kürzel</label> */}
                    <input {...register("kuerzel", {required: 'Kürzel erforderlich!'}) } type="text" placeholder='Kürzel' />
                    <span className='text-red-600'>{errors.kuerzel?.message}</span>
                </div>

                <div>
                    <label htmlFor="Skills">Skills</label>

                    {fields.map((field, index) => (
                        <div key={field.id}>
                            <select {...register(`skills.${index}.skill_name`)} name="skill" id="skill" className='input-base'>
                                <option value="Skill">Skill auswählen</option>
                                {skills.map( (s) => (
                                    <option key={s.id} value={s.id}>{s.skill_name}</option>
                                ))}
                            </select>
                            {/* <input {...register(`skills.${index}.skill_name`)} type="text" placeholder='Skill' /> */}
                            <input {...register(`skills.${index}.skill_level`)} type="text" placeholder='Level' />
                            <button onClick={() => remove(index)}>Remove</button>
                        </div>
                    ))}
                    {/* we use Employee who is generated by createSelectSchema, therefore id is required --> we should differentiate more and instead use a type who is generated by createInsertSchema 
                    temporary we will give id a dummy-value 0 and ignore it in our handleServerAction*/}
                    <button onClick={() => append({ id: 0 ,skill_name: '', skill_level: 1})}>Add</button> 
                    
                </div>

                <div className='flex flex-col'>
                    <label htmlFor="Projekte">Projekte</label>
                    {/* ProjektTable */}
                    <select name="project" id="project" className='input-base'>
                        <option value="Projekt auswählen">Projekt auswählen</option>
                        {projects.map((p) => (
                            <option key={p.id} value={p.id}>
                                {p.project_name}
                            </option>
                        ))}
                    </select>

                </div>

                <button type='submit' className=''>Submit</button>

            </form>

        </div>
    )
}
